import{h as e,o as E,c as d,k as s,t as a,a as t,Q as h}from"./chunks/framework.f0534666.js";function i(n){return n instanceof Array||Object.prototype.toString.call(n)==="[object Array]"}const _=`/**
 * 判断是否为数组
 * @param input 任意值对象
 * @returns boolean
 */
export declare function isArray(input: any): boolean;
`,u=h(`<h1 id="isarray" tabindex="-1">isArray <a class="header-anchor" href="#isarray" aria-label="Permalink to &quot;isArray&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>判断是否是一个数组</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { isArray } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@bnfe/common-utils&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">flag1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">flag2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1,2,3&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(flag1);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(flag2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { isArray } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@bnfe/common-utils&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">flag1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">flag2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1,2,3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(flag1);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(flag2);</span></span></code></pre></div><h2 id="run-code" tabindex="-1">Run Code <a class="header-anchor" href="#run-code" aria-label="Permalink to &quot;Run Code&quot;">​</a></h2>`,6),g={class:"language-js vp-adaptive-theme"},m=s("button",{title:"Copy Code",class:"copy"},null,-1),f=s("span",{class:"lang"},"js",-1),F={class:"shiki github-dark vp-code-dark"},b={class:"line"},C={style:{color:"#E1E4E8"}},v={class:"line"},A={style:{color:"#E1E4E8"}},k={class:"shiki github-light vp-code-light"},q={class:"line"},B={style:{color:"#24292E"}},D={class:"line"},T={style:{color:"#24292E"}},x=s("h2",{id:"type-declarations",tabindex:"-1"},[t("Type Declarations "),s("a",{class:"header-anchor",href:"#type-declarations","aria-label":'Permalink to "Type Declarations"'},"​")],-1),P={class:"language-ts vp-adaptive-theme"},j=s("button",{title:"Copy Code",class:"copy"},null,-1),S=s("span",{class:"lang"},"ts",-1),N={class:"shiki github-dark vp-code-dark"},V={class:"line"},O={style:{color:"#E1E4E8"}},R={class:"shiki github-light vp-code-light"},I={class:"line"},J={style:{color:"#24292E"}},z=JSON.parse('{"title":"isArray","description":"","frontmatter":{},"headers":[],"relativePath":"common/src/md/isArray.md","filePath":"common/src/md/isArray.md"}'),Q={name:"common/src/md/isArray.md"},G=Object.assign(Q,{setup(n){const p=e(_),o=e("null"),l=e("null");function y(){const c=i([1,2,3]),r=i("1,2,3");o.value=c,l.value=r}return(c,r)=>(E(),d("div",null,[u,s("p",null,[s("button",{onClick:y},"运行")]),s("div",g,[m,f,s("pre",F,[s("code",null,[s("span",b,[s("span",C,a(o.value),1)]),t(`
`),s("span",v,[s("span",A,a(l.value),1)])])]),s("pre",k,[s("code",null,[s("span",q,[s("span",B,a(o.value),1)]),t(`
`),s("span",D,[s("span",T,a(l.value),1)])])])]),x,s("div",P,[j,S,s("pre",N,[s("code",null,[s("span",V,[s("span",O,a(p.value),1)])])]),s("pre",R,[s("code",null,[s("span",I,[s("span",J,a(p.value),1)])])])])]))}});export{z as __pageData,G as default};
